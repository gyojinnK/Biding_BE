generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id             String          @id @default(uuid())
  name           String
  phoneNumber    String          @unique
  address        String
  addressDetail  String
  email          String          @unique
  password       String
  biography      String?
  createdAt      DateTime        @default(now()) @db.Timestamptz()
  updatedAt      DateTime        @updatedAt @db.Timestamptz()
  buyerReviews   Review[]        @relation("BuyerReviews")
  sellerReviews  Review[]        @relation("SellerReviews")
  images         User_image[]
  products       Product[]
  bid            Bid[]
  likedProducts  Product_liked[]
  chatRoomSeller Chat_room[]     @relation("seller")
  chatRoomBuyer  Chat_room[]     @relation("buyer")
  chatMessage    Chat_message[]
}

model User_image {
  id              String   @id @default(uuid())
  profileImage    String?
  backgroundImage String?
  User            User     @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime @default(now()) @db.Timestamptz()
  updatedAt       DateTime @updatedAt @db.Timestamptz()
}

model Category {
  id        String     @id @default(uuid())
  name      String
  parentId  String?    @map("parent_id")
  depth     Int
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
  createdAt DateTime   @default(now()) @db.Timestamptz()
  updatedAt DateTime   @updatedAt @db.Timestamptz()
}

model Product {
  id               String          @id @default(uuid())
  seller           User            @relation(fields: [sellerId], references: [id])
  sellerId         String
  title            String
  description      String
  registrationDate DateTime        @default(now())
  end_date         String
  startPrice       Int
  reservePrice     Int?
  hammerPrice      Int?
  category         Category        @relation(fields: [categoryId], references: [id])
  categoryId       String
  status           Status          @default(auctionProgress)
  images           Product_image[]
  bid              Bid[]
  likes            Product_liked[]
  chatRoom         Chat_room[]
  createdAt        DateTime        @default(now()) @db.Timestamptz()
  updatedAt        DateTime        @updatedAt @db.Timestamptz()
}

model Product_image {
  id        String   @id @default(uuid())
  image_1   String
  image_2   String?
  image_3   String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Product_liked {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  liked_date DateTime @default(now())
  createdAt  DateTime @default(now()) @db.Timestamptz()
  updatedAt  DateTime @updatedAt @db.Timestamptz()
}

model Review {
  id         String   @id @default(uuid())
  coment     String
  buyerId    String
  sellerId   String
  buyer      User     @relation("BuyerReviews", fields: [buyerId], references: [id])
  seller     User     @relation("SellerReviews", fields: [sellerId], references: [id])
  reviewTime DateTime @default(now())
  createdAt  DateTime @default(now()) @db.Timestamptz()
  updatedAt  DateTime @updatedAt @db.Timestamptz()
}

//입찰내역
model Bid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  bidPrice  Int
  bidTime   DateTime @default(now())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Chat_room {
  id           String         @id @default(uuid())
  buyerId      String
  sellerId     String
  productId    String
  chatTime     DateTime       @default(now())
  buyer        User           @relation("buyer", fields: [buyerId], references: [id])
  product      Product        @relation(fields: [productId], references: [id])
  seller       User           @relation("seller", fields: [sellerId], references: [id])
  chatMessages Chat_message[]
  createdAt    DateTime       @default(now()) @db.Timestamptz()
  updatedAt    DateTime       @updatedAt @db.Timestamptz()
}

model Chat_message {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  chatId    String
  chat      Chat_room @relation(fields: [chatId], references: [id], onDelete: Cascade)
  content   String
  sendTime  DateTime  @default(now())
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt @db.Timestamptz()
}

enum Status {
  all
  auctionProgress
  auctionCompleted
}
