generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  user_id        String          @id @default(uuid())
  name           String
  phone_number   Int             @unique
  address        String
  email          String          @unique
  password       String
  biography      String?
  buyerReviews   Review[]        @relation("BuyerReviews")
  sellerReviews  Review[]        @relation("SellerReviews")
  images         User_image[]
  products       Product[]
  bid            Bid[]
  likedProducts  Product_liked[]
  chatRoomSeller Chat_room[]     @relation("seller")
  chatRoomBuyer  Chat_room[]     @relation("buyer")
  chatMessage    Chat_message[]
}

model User_image {
  image_id         String  @id @default(uuid())
  profile_image    String?
  background_image String?
  User             User    @relation(fields: [user_id], references: [user_id])
  user_id          String
}

model Category {
  category_id String     @id @default(uuid())
  name        String
  parent_id   String?    @map("parent_id")
  depth       Int
  parent      Category?  @relation("CategoryToCategory", fields: [parent_id], references: [category_id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
}

model Product {
  product_id        String          @id @default(uuid())
  seller            User            @relation(fields: [seller_id], references: [user_id])
  seller_id         String
  title             String
  description       String
  registration_date DateTime        @default(now())
  end_date          String
  start_price       Int
  reserve_price     Int?
  hammer_price      Int?
  category          Category        @relation(fields: [category_id], references: [category_id])
  category_id       String
  status            Status          @default(auctionProgress)
  images            Product_image[]
  bid               Bid[]
  likes             Product_liked[]
  chatRoom          Chat_room[]
}

model Product_image {
  image_id   String  @id @default(uuid())
  image_1    String
  image_2    String?
  image_3    String?
  product    Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  product_id String
}

model Product_liked {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [product_id], references: [product_id])
  product_id String
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    String
  liked_date DateTime @default(now())
}

model Review {
  review_id  String   @id @default(uuid())
  coment     String
  buyerId    String
  sellerId   String
  buyer      User     @relation("BuyerReviews", fields: [buyerId], references: [user_id])
  seller     User     @relation("SellerReviews", fields: [sellerId], references: [user_id])
  reviewTime DateTime @default(now())
}

//입찰내역
model Bid {
  bid_id     String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    String
  product    Product  @relation(fields: [product_id], references: [product_id])
  product_id String
  bidPrice   Int
  bidTime    DateTime @default(now())
}

model Chat_room {
  chat_id      String         @id @default(uuid())
  buyer_id     String
  seller_id    String
  product_id   String
  chatTime     DateTime       @default(now())
  buyer        User           @relation("buyer", fields: [buyer_id], references: [user_id])
  product      Product        @relation(fields: [product_id], references: [product_id])
  seller       User           @relation("seller", fields: [seller_id], references: [user_id])
  chatMessages Chat_message[]
}

model Chat_message {
  message_id String    @id @default(uuid())
  user       User      @relation(fields: [user_id], references: [user_id])
  user_id    String
  chat_id    String
  chat       Chat_room @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  content    String
  sendTime   DateTime  @default(now())
}

enum Status {
  all
  auctionProgress
  auctionCompleted
}
